import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.LinkedList;

import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.text.Document;

import automatons.Automaton;
import automatons.TM;
import automatons.Tape;
import parser.Parser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Jacob Cohen
 */
public class GUI extends javax.swing.JFrame {

	private static final long serialVersionUID = 8260468486193065348L;

	/**
     * Creates new form GUI
     */
    public GUI() {
    	setTitle("Automaton Compiler, Mode = DFA");
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        inputTextArea = new javax.swing.JTextPane();
        buildButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        consoleTextArea = new javax.swing.JTextArea();
        inputStringField = new javax.swing.JTextField();
        inputStringButton = new javax.swing.JRadioButton();
        kInputButton = new javax.swing.JRadioButton();
        kField = new javax.swing.JTextField();
        mainMenu = new javax.swing.JMenuBar();
        loadMenu = new javax.swing.JMenu();
        dfaPresets = new javax.swing.JMenu();
        oddNum1s = new javax.swing.JMenuItem();
        nfaPresets = new javax.swing.JMenu();
        tmPresets = new javax.swing.JMenu();
        ww = new javax.swing.JMenuItem();
        menu0n1n = new javax.swing.JMenuItem();
        modeMenu = new javax.swing.JMenu();
        dfaMode = new javax.swing.JRadioButtonMenuItem();
        nfaMode = new javax.swing.JRadioButtonMenuItem();
        tmMode = new javax.swing.JRadioButtonMenuItem();
        pdaMode = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(inputTextArea);

        buildButton.setText("BUILD");
        buildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildButtonActionPerformed(evt);
            }
        });

        runButton.setText("RUN");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        consoleTextArea.setColumns(20);
        consoleTextArea.setRows(5);
        jScrollPane2.setViewportView(consoleTextArea);

        inputStringField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputStringFieldActionPerformed(evt);
            }
        });

        inputStringButton.setSelected(true);
        inputStringButton.setText("Input String:");
        inputStringButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputStringButtonActionPerformed(evt);
            }
        });

        kInputButton.setText("Strings Up to K =");
        kInputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kInputButtonActionPerformed(evt);
            }
        });

        kField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kFieldActionPerformed(evt);
            }
        });

        loadMenu.setText("Load");

        dfaPresets.setText("DFA Presets");
        dfaPresets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dfaPresetsActionPerformed(evt);
            }
        });

        oddNum1s.setText("Odd Number of 1's");
        oddNum1s.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
        		oddNum1sActionPerformed(evt);
        	}
        });
        dfaPresets.add(oddNum1s);

        loadMenu.add(dfaPresets);

        nfaPresets.setText("NFA Presets");
        nfaPresets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nfaPresetsActionPerformed(evt);
            }
        });
        loadMenu.add(nfaPresets);

        tmPresets.setText("TM Presets");
        tmPresets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tmPresetsActionPerformed(evt);
            }
        });

        ww.setText("ww");
        ww.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wwActionPerformed(evt);
            }
        });
        tmPresets.add(ww);

        menu0n1n.setText("0^n1^n");
        menu0n1n.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu0n1nActionPerformed(evt);
            }
        });
        tmPresets.add(menu0n1n);
        
        JMenuItem item = new JMenuItem("a^nb^nc^n");
        item.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
        		inputTextArea.setText(				"Q := { q0, q1, q2, q3, q4, q5 };\r\n" + 
				"Σ := { a, b, c };\r\n" + 
				"Γ := { a, b, c, A, B, C, _ };\r\n" + 
				"δ :=	(q0, a) = (q1, A, R),\r\n" + 
				"	(q0, B) = (q4, B, R),\r\n" + 
				"	(q0, _) = (q5, _, R),\r\n" + 
				"	(q1, a) = (q1, a, R),\r\n" + 
				"	(q1, B) = (q1, B, R),\r\n" +
				"	(q1, b) = (q2, B, R),\r\n" + 
				"	(q2, b) = (q2, b, R),\r\n" + 
				"	(q2, C) = (q2, C, R),\r\n" +
				"	(q2, c) = (q3, C, L),\r\n" + 
				"	(q3, B) = (q3, B, L),\r\n" + 
				"	(q3, b) = (q3, b, L),\r\n" + 
				"	(q3, a) = (q3, a, L),\r\n" + 
				"	(q3, C) = (q3, C, L),\r\n" + 
				"	(q3, A) = (q0, A, R),\r\n" + 
				"	(q4, B) = (q4, B, R),\r\n" + 
				"	(q4, C) = (q4, C, R),\r\n" + 
				"	(q4, _) = (q5, _, R);\r\n" + 
				"q := q0;\r\n" + 
				"B := _;\r\n" + 
				"F := { q5 };");
        		
                dfaMode.setSelected(false);
                nfaMode.setSelected(false);
            	tmMode.setSelected(true);
            	setTitle("Automaton Compiler, Mode = TM");
        	}
        });
        tmPresets.add(item);
        
        item = new JMenuItem("Binary Palindromes");
        item.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
        		inputTextArea.setText(				"Q := { q0, q1, q2, q3, q4, q5, q6 };\r\n" + 
        				"Σ := { 0, 1 };\r\n" + 
        				"Γ := { 0, 1, _ };\r\n" + 
        				"δ :=	(q0, 0) = (q1, _, R),\r\n" + 
        				"	(q0, 1) = (q5, _, R),\r\n" + 
        				"	(q0, _) = (q3, _, R),\r\n" + 
        				"	(q1, 0) = (q1, 0, R),\r\n" + 
        				"	(q1, 1) = (q1, 1, R),\r\n" + 
        				"	(q1, _) = (q2, _, L),\r\n" + 
        				"	(q2, 0) = (q4, _, L),\r\n" + 
        				"	(q2, _) = (q3, _, R),\r\n" + 
        				"	(q4, 0) = (q4, 0, L),\r\n" + 
        				"	(q4, 1) = (q4, 1, L),\r\n" + 
        				"	(q4, _) = (q0, _, R),\r\n" + 
        				"	(q5, 0) = (q5, 0, R),\r\n" + 
        				"	(q5, 1) = (q5, 1, R),\r\n" + 
        				"	(q5, _) = (q6, _, L),\r\n" + 
        				"	(q6, _) = (q3, _, R),\r\n" + 
        				"	(q6, 1) = (q4, _, L);\r\n" + 
        				"q := q0;\r\n" + 
        				"B := _;\r\n" + 
        				"F := { q3 };");
        		
                dfaMode.setSelected(false);
                nfaMode.setSelected(false);
            	tmMode.setSelected(true);
            	setTitle("Automaton Compiler, Mode = TM");
        	}
        });
        tmPresets.add(item);

        loadMenu.add(tmPresets);

        mainMenu.add(loadMenu);

        modeMenu.setText("Mode");

        dfaMode.setSelected(true);
        dfaMode.setText("DFA");
        dfaMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dfaModeActionPerformed(evt);
            }
        });
        modeMenu.add(dfaMode);

        nfaMode.setText("NFA");
        nfaMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nfaModeActionPerformed(evt);
            }
        });
        modeMenu.add(nfaMode);
        
        pdaMode.setText("PDA");
        pdaMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdaModeActionPerformed(evt);
            }
        });
        modeMenu.add(pdaMode);

        tmMode.setText("TM");
        tmMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tmModeActionPerformed(evt);
            }
        });
        modeMenu.add(tmMode);

        mainMenu.add(modeMenu);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buildButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(kInputButton)
                            .addComponent(inputStringButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputStringField, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(kField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputStringButton)
                            .addComponent(inputStringField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(kField)
                            .addComponent(kInputButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buildButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)))
                .addContainerGap())
        );
    	runButton.setEnabled(false);
		consoleTextArea.setEditable(false);
        pack();
        setLocationRelativeTo(null);
    }// </editor-fold> 
    
    private void dfaModeActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        nfaMode.setSelected(false);
        tmMode.setSelected(false);
    	dfaMode.setSelected(true);
    	pdaMode.setSelected(false);
    	setTitle("Automaton Compiler, Mode = DFA");
    }
    
    private void pdaModeActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        nfaMode.setSelected(false);
        tmMode.setSelected(false);
    	dfaMode.setSelected(false);
    	pdaMode.setSelected(true);
    	setTitle("Automaton Compiler, Mode = PDA");
    }
    
    private String input;
    private class RunThread extends Thread
    {
    	private Automaton automaton;
    	
    	public RunThread(Automaton automaton)
    	{
    		this.automaton = automaton;
    	}
    	
    	public void run()
    	{
        	buildButton.setEnabled(false);    		
    		runButton.setEnabled(false);
    		try
    		{
	    		JFrame animationFrame = new JFrame();
	    		animationFrame.addWindowListener(new WindowAdapter()
	    		{
	    			@Override
	    			public void windowClosing(WindowEvent e)
	    			{
	    				String consoleText = consoleTextArea.getText();
	    				if(consoleText.contains("ACCEPTED") == false && consoleText.contains("REJECTED") == false)
	    					consoleTextArea.setText("Closed before a decision could be made");
	    				buildButton.setEnabled(true);    		
	    	    		runButton.setEnabled(true);
	    			}
	    		});
	    		
	    		consoleTextArea.setText("Testing the input " + input + "... ");
	        	if(tmMode.isSelected() && automaton != null && automaton instanceof TM)
	        	{
	        		TM tm = (TM)automaton;
	        		Tape tape = new Tape(tm.B);
	        		tape.load(input);
	        		automatons.State current = tm.q;
	        		
	        		TapePanel tapePanel = new TapePanel(-1, tm);
	        		animationFrame.add(tapePanel);
	        		animationFrame.pack();
	        		Dimension d = jScrollPane1.getSize();
	        		animationFrame.setSize(d.width + 11, d.height + 11);
	        		animationFrame.setLocationRelativeTo(jScrollPane1);
	        		animationFrame.setVisible(true);
	        		
	        		while(tm.F.contains(current) == false && current != TM.REJECT)
	        		{
	        			tapePanel.setState(current);
	        			tapePanel.setTape(tape);
	        			animationFrame.repaint();
	        			try {
							Thread.sleep(tapePanel.getDelay());
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	        			current = tm.δ(current, tape);
	        		}
	        		
	        		if(current != TM.REJECT)
	        		{
		    			consoleTextArea.append("ACCEPTED");
		    			tapePanel.accept(true);
	        		}
		    		else
		    		{
		    			consoleTextArea.append("REJECTED");
		    			tapePanel.accept(false);
		    		}
	        	}
    		}
    		catch(Throwable th)
    		{
    			th.printStackTrace();
    			if(th != null)
    				consoleTextArea.setText(th.getMessage());
    		}
    		finally
    		{
//    			buildButton.setEnabled(true);    		
//	    		runButton.setEnabled(true);
    		}
    	}
    }

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt)
    {    	
    	try
    	{
	    	if(inputStringButton.isSelected())
	    	{
	    		input = inputStringField.getText();
	    		for(int i = 0; i < input.length(); i++)
	    			if(automaton.Σ.contains(input.charAt(i)) == false)
	    				throw new Error("Unrecognized input character at '" + input.charAt(i) + "'.");
	    		
	    		Thread runThread = new RunThread(automaton);
	    		runThread.start();
	    	}
	    	else if(kInputButton.isSelected())
	    		(new EnumeratorThread()).start();
    	}
    	catch(Error error)
    	{
        	consoleTextArea.setText(error.getLocalizedMessage());
    	}
    }
    
    String pdaPalindrome = "Q := { A, B, C, D }; Σ := { 0, 1 }; Γ := { 0, 1 , $}; δ := (A, EPSILON, EPSILON)  = (B, $), (B, 0, EPSILON) = (B, 0), (B, 1, EPSILON) = (B, 1), (B, EPSILON, EPSILON) = (C, EPSILON), (C, 0, 0) = (C,  EPSILON), (C, 1, 1) = (C, EPSILON), (C, EPSILON, $) = (D, EPSILON); q := A; F := { D };";
    
    private class EnumeratorThread extends Thread
    {
    	public EnumeratorThread()
    	{
    		this.setPriority(Thread.MIN_PRIORITY);
    	}
    	
    	public void run()
    	{    		
    		try
    		{		
	    		buildButton.setEnabled(false);    		
	    		runButton.setEnabled(false);
	    		
	    		int k = Integer.valueOf(kField.getText());
	    		consoleTextArea.setText("Generating Strings...");
	    		LinkedList<String> inputStrings = StringGenerator.generateAllUptoKLength(automaton.Σ, k);
	    		consoleTextArea.setText("");
	    		
	    		Document d = consoleTextArea.getDocument();
	    		boolean first = true;
	    		for(String str : inputStrings)
	    		{
	    			if(automaton.test(str))
	    			{
	    				if(first == false)
	    					consoleTextArea.append("\n");
	    				consoleTextArea.append(str);
	    				consoleTextArea.select(d.getLength(), d.getLength());
	    				first = false;
	    			}
	    		}
    		}
    		catch(Exception ex)
    		{
    			ex.printStackTrace();
    			consoleTextArea.setText("Error, expected a number for k");
    		}
    		
    		buildButton.setEnabled(true);
    		runButton.setEnabled(true);
    	}
    }

    private void inputStringFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
    }                                                

    private void inputStringButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:
        inputStringButton.setSelected(true);
        kInputButton.setSelected(false);
    }                                                 

    private void kFieldActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    }                                      

    private void kInputButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        kInputButton.setSelected(true);
        inputStringButton.setSelected(false);
    }                                            

    private void dfaPresetsActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void nfaPresetsActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void tmPresetsActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void nfaModeActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    	nfaMode.setSelected(true);
        dfaMode.setSelected(false);
        tmMode.setSelected(false);
    	pdaMode.setSelected(false);
    	setTitle("Automaton Compiler, Mode = NFA");
    }                                       

    private void tmModeActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        dfaMode.setSelected(false);
        nfaMode.setSelected(false);
    	tmMode.setSelected(true);
    	pdaMode.setSelected(false);
    	setTitle("Automaton Compiler, Mode = TM");
    }             

    private void wwActionPerformed(java.awt.event.ActionEvent evt)
    {                                   
        // TODO add your handling code here:
    	inputTextArea.setText(
    			"Q := { q0, q1, q2, q3, q4, q5, q6, q7, q8, q9 };\r\n" + 
    					"Σ := { 0, 1 };\r\n" + 
    					"Γ := { 0, 1, X, Y, #, _ };\r\n" + 
    					"δ :=	(q0, 0) = (q1, X, R),\r\n" + 
    					"	(q0, 1) = (q1, Y, R),\r\n" + 
    					"	(q0, X) = (q4, X, L),\r\n" + 
    					"	(q0, Y) = (q4, Y, L),\r\n" + 
    					"	(q1, 0) = (q1, 0, R),\r\n" + 
    					"	(q1, 1) = (q1, 1, R),\r\n" + 
    					"	(q1, X) = (q2, X, L),\r\n" + 
    					"	(q1, Y) = (q2, Y, L),\r\n" + 
    					"	(q1, _) = (q2, #, L),\r\n" + 
    					"	(q2, 0) = (q3, X, L),\r\n" + 
    					"	(q2, 1) = (q3, Y, L),\r\n" + 
    					"	(q3, 0) = (q3, 0, L),\r\n" + 
    					"	(q3, 1) = (q3, 1, L),\r\n" + 
    					"	(q3, X) = (q0, X, R),\r\n" + 
    					"	(q3, Y) = (q0, Y, R),\r\n" + 
    					"	(q4, X) = (q4, 0, L),\r\n" + 
    					"	(q4, Y) = (q4, 1, L),\r\n" + 
    					"	(q4, _) = (q5, #, R),\r\n" + 
    					"	(q5, 0) = (q6, X, R),\r\n" + 
    					"	(q5, 1) = (q7, Y, R),\r\n" + 
    					"	(q5, _) = (q9, _, L),\r\n" + 
    					"	(q6, 0) = (q6, 0, R),\r\n" + 
    					"	(q6, 1) = (q6, 1, R),\r\n" + 
    					"	(q6, _) = (q6, _, R),\r\n" + 
    					"	(q6, X) = (q8, _, L),\r\n" + 
    					"	(q7, 0) = (q7, 0, R),\r\n" + 
    					"	(q7, 1) = (q7, 1, R),\r\n" + 
    					"	(q7, _) = (q7, _, R),\r\n" + 
    					"	(q7, Y) = (q8, _, L),\r\n" + 
    					"	(q8, 0) = (q8, 0, L),\r\n" + 
    					"	(q8, 1) = (q8, 1, L),\r\n" + 
    					"	(q8, _) = (q8, _, L),\r\n" + 
    					"	(q8, X) = (q5, X, R),\r\n" + 
    					"	(q8, Y) = (q5, Y, R);	\r\n" + 
    					"q := q0;\r\n" + 
    					"B := _;\r\n" + 
    					"F := { q9 };\r\n");
        dfaMode.setSelected(false);
        nfaMode.setSelected(false);
    	tmMode.setSelected(true);
    	setTitle("Automaton Compiler, Mode = TM");
    }                                  

    private void menu0n1nActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    	
    }                                        
    
    private Automaton automaton = null;
    
    private void buildButtonActionPerformed(java.awt.event.ActionEvent evt)
    {
        try
        {
        	consoleTextArea.setText("Building your Automaton...\n");
	    	String input = inputTextArea.getText();
	    	Parser parser = new Parser(input);
	    	if(dfaMode.isSelected())
	    		automaton = parser.parseDFA();
	    	else if(nfaMode.isSelected())
	    		automaton = parser.parseNFA();
	    	else if(tmMode.isSelected())
	    		automaton = parser.parseTM();
	    	else if(pdaMode.isSelected())
	    		automaton = parser.parsePDA();
	    	runButton.setEnabled(true);
	    	consoleTextArea.append("Congratulations, your Automaton has been successfully constructed");
        }
        catch(Error error)
        {
        	consoleTextArea.append(error.getLocalizedMessage());
        }
    }
    
    private void oddNum1sActionPerformed(java.awt.event.ActionEvent evt)
    {                                            
    	inputTextArea.setText(""
				+ "Q := { q0, q1 };\r\n"
				+ "Σ := { 0, 1 };\r\n"
				+ "δ := (q0, 0) = q0, (q0, 1) = q1, (q1, 0) = q1, (q1, 1) = q0;\r\n"
				+ "q := q0;\r\n"
				+ "F := { q1 };");
        nfaMode.setSelected(false);
        tmMode.setSelected(false);
    	dfaMode.setSelected(true);
    	setTitle("Automaton Compiler, Mode = DFA");
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton buildButton;
    private javax.swing.JTextArea consoleTextArea;
    private javax.swing.JRadioButtonMenuItem dfaMode;
    private javax.swing.JMenu dfaPresets;
    private javax.swing.JRadioButton inputStringButton;
    private javax.swing.JTextField inputStringField;
    private javax.swing.JTextPane inputTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField kField;
    private javax.swing.JRadioButton kInputButton;
    private javax.swing.JMenu loadMenu;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JMenuItem menu0n1n;
    private javax.swing.JMenu modeMenu;
    private javax.swing.JRadioButtonMenuItem nfaMode;
    private javax.swing.JMenu nfaPresets;
    private javax.swing.JMenuItem oddNum1s;
    private javax.swing.JButton runButton;
    private javax.swing.JRadioButtonMenuItem tmMode;
    private javax.swing.JRadioButtonMenuItem pdaMode;
    private javax.swing.JMenu tmPresets;
    private javax.swing.JMenuItem ww;
    // End of variables declaration                  
}
